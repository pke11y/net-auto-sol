#
# Deploy eBGP peering for L3VPN
# This playbook is dependent on running 'create_data_model.yml' to produce 'nodes.yml'
---
- hosts: mpls
  connection: network_cli
  gather_facts: no
  vars_files:
    - nodes.yml
    - common.yml
  tasks:
    - name: CREATE CONFIG DIRECTORY
      local_action: file path={{playbook_dir}}/results state=directory
      run_once: true
      check_mode: no
    - name: CREATE CONFIG
      template: src=./templates/{{ansible_network_os}}-mpls-template.j2 dest={{playbook_dir}}/results/{{inventory_hostname}}.cfg
    - name: CREATE DIFF FILES
      local_action: file path={{playbook_dir}}/results/{{inventory_hostname}}.diff state=touch
      check_mode: no
    - name: DEPLOY CONFIG TO DEVICES
      napalm_install_config:
        hostname: "{{ inventory_hostname }}"
        username: "{{ ansible_user }}"
        dev_os: "{{ ansible_network_os }}"
        password: "{{ ansible_ssh_pass }}"
        config_file: "{{playbook_dir}}/results/{{inventory_hostname}}.cfg"
        commit_changes: True
        replace_config: True
        get_diffs: True
        diff_file: "{{playbook_dir}}/results/{{inventory_hostname}}.diff"
      register: result
    - debug:
        var: result['changed']
    - name:  GET NAPALM FACTS 
      napalm_get_facts:
        hostname: '{{ansible_host}}'
        username: '{{ansible_user}}'
        dev_os: '{{ansible_network_os}}'
        password: '{{ ansible_ssh_pass }}'
        filter: ['facts', 'interfaces', 'interfaces_ip', 'bgp_neighbors']
      register: napalm_facts
    - name: CHECK INTERFACES 
      assert:
        that:
          - "{{ item['value']['is_up'] == true }}"
        fail_msg: "Interface {{ item['key'] }} is down"
      loop: "{{ napalm_facts['ansible_facts']['napalm_interfaces'] | dict2items }}"
      when: item['value']['is_enabled'] == true
    - name: OSPF NEIGHBOR STATUS 
      assert:
        that:
          - "{{ item['value']['is_up'] == true }}"
        fail_msg: "Interface {{ item['key'] }} is down"
      loop: "{{ napalm_facts['ansible_facts']['napalm_interfaces'] | dict2items }}"
      when: item['value']['is_enabled'] == true
    - name: CHECK BGP NEIGHBOUR PEERING STATUS
      assert: 
        that:
          - "{{ item['value']['is_up'] == true }}"
        fail_msg: "BGP peer {{ item['key'] }} is down"
      loop: "{{ napalm_facts['ansible_facts']['napalm_bgp_neighbors']['global']['peers']  | dict2items }}"

