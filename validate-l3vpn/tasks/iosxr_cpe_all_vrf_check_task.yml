#
# These tasks check if a CPE mgmt IP exists in other VPNv4 VRF's on an IOS XR device
#
#
---
- name: GET ALL VPNV4 UNICAST DATA FROM CLI
  cli_command:
    command: "show route vrf all ipv4"
  register: xr_vpnv4_routes
  tags: [step3, check_state]
- local_action: copy content="{{xr_vpnv4_routes|to_nice_json}}" dest="{{logging_dir}}/{{inventory_hostname}}_vrf_check_{{ '%Y%m%d%H%M%S' | strftime }}.log"
  when: logging is defined
  tags: [step3, check_state]
- name: PARSE VPNV4 ROUTES
  set_fact:
    xr_parsed_vpnv4_routes: "{{ xr_vpnv4_routes.stdout | pyats_parser('show route vrf all ipv4', 'iosxr') }}"
  when: xr_vpnv4_routes.stdout is defined
  tags: [step3, check_state]
- debug: var=xr_parsed_vpnv4_routes
  tags: [step3, check_state]
- name: INCLUDE CPE NODES
  include_vars: 
    file: ./data_models/cpe_nodes.yml
    name: cpe_nodes
  when: xr_parsed_vpnv4_routes is defined
  tags: [step3, check_state]
- name: SET CPE NODES ALLOWED VRF
  set_fact: 
    allowed_vrfs: "{{ cpe_nodes | get_cpe_allowed_vrfs }}"
  when: xr_parsed_vpnv4_routes is defined
  tags: [step3, check_state]
# - debug: msg="{{ xr_parsed_vpnv4_routes | find_vrfs_with_ip(cpe_nodes[item]['mgmt']+'/32', allowed_vrfs[item]) | map(attribute=item) | length }}"
#   loop: "{{groups['ioscpe']}}"
#   tags: [step3, check_state]
- name: CHECK CPE NODE STATUS IN THE CORE
  assert: 
    that:
      - "{{ xr_parsed_vpnv4_routes | verify_vpnv4_status(cpe_nodes[item]['routerid']+'/32', allowed_vrfs[item]) | bool }}"
    fail_msg: "{{ item }} is connected to another VPN service"
    success_msg: "{{ item }} is only connected to {{ allowed_vrfs[item] }}"
  register: xr_vrf_check_result
  loop: "{{groups['ioscpe']}}"
  when: xr_parsed_vpnv4_routes is defined
  tags: [step3, check_state]
# - name: VPNv4 RESULT TEST
#   fail:
#     msg: 'Deployment Failed'
#   loop: "{{ xr_vrf_check_result.results.0 | dict2items }}"
#   when: 
#     - item.key == 'failed'
#     - item.value | bool
#     - xr_vrf_check_result.results is defined
#   tags: [step3, check_state]
